// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator pothos {
  provider = "prisma-pothos-types"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  asset     Asset[]
  liability Liability[]
  resetToken        String?   // For password reset
  resetTokenExpiry  DateTime? // When the token expires
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  token_type        String?
  expires_at        Int?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model Asset {
  id         String   @id @default(cuid())
  userId     String
  name       String
  typeId     Int
  value      Decimal
  currencyId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  user         User           @relation(fields: [userId], references: [id])
  assetType    AssetType      @relation(fields: [typeId], references: [id])
  currency     Currency      @relation(fields: [currencyId], references: [id])
  assetHistory AssetHistory[]
}

model AssetHistory {
  id        Int      @id @default(autoincrement())
  assetId   String
  value     Decimal
  timestamp DateTime @default(now())

  asset Asset @relation(fields: [assetId], references: [id])
}

model AssetType {
  id   Int    @id @default(autoincrement())
  name String @unique

  asset Asset[]
}

model Currency {
  id   Int    @id @default(autoincrement())
  code String @unique @db.VarChar(3)

  asset     Asset[]
  liability Liability[]
	@@map("Currency")
}

model Liability {
  id             String   @id @default(cuid())
  userId         String
  name           String
  typeId         Int
  value          Decimal
  currencyId     Int
  referenceUrl   String?
  monthlyPayment Decimal?
  interestRate   Decimal?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  user             User               @relation(fields: [userId], references: [id])
  liabilityType    LiabilityType      @relation(fields: [typeId], references: [id])
  currency         Currency          @relation(fields: [currencyId], references: [id])
  liabilityHistory LiabilityHistory[]
}

model LiabilityType {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  liability Liability[]
}

model LiabilityHistory {
  id          Int      @id @default(autoincrement())
  liabilityId String
  value       Decimal
  timestamp   DateTime @default(now())

  liability Liability @relation(fields: [liabilityId], references: [id])
}
